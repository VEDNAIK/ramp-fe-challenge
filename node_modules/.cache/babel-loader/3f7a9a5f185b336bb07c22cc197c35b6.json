{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    if (!employeeId) {\n      setTransactionsByEmployee(null);\n      return;\n    }\n\n    try {\n      const data = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      });\n      setTransactionsByEmployee(data);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      setTransactionsByEmployee(null); // Ensure it does not crash\n    }\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","data","error","console","invalidateData"],"sources":["/Users/ved/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    async (employeeId: string | null) => {\n      if (!employeeId) {\n        setTransactionsByEmployee(null);\n        return;\n      }\n\n      try {\n        const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId }\n        );\n        setTransactionsByEmployee(data);\n      } catch (error) {\n        console.error(\"Error fetching transactions:\", error);\n        setTransactionsByEmployee(null); // Ensure it does not crash\n      }\n    },[fetchWithCache]\n  );\n  \n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EAEA,MAAMO,SAAS,GAAGR,WAAW,CAC3B,MAAOS,UAAP,IAAqC;IACnC,IAAI,CAACA,UAAL,EAAiB;MACfF,yBAAyB,CAAC,IAAD,CAAzB;MACA;IACD;;IAED,IAAI;MACF,MAAMG,IAAI,GAAG,MAAMN,cAAc,CAC/B,wBAD+B,EAE/B;QAAEK;MAAF,CAF+B,CAAjC;MAIAF,yBAAyB,CAACG,IAAD,CAAzB;IACD,CAND,CAME,OAAOC,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;MACAJ,yBAAyB,CAAC,IAAD,CAAzB,CAFc,CAEmB;IAClC;EACF,CAjB0B,EAiBzB,CAACH,cAAD,CAjByB,CAA7B;EAqBA,MAAMS,cAAc,GAAGb,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEG,IAAI,EAAEJ,sBAAR;IAAgCD,OAAhC;IAAyCG,SAAzC;IAAoDK;EAApD,CAAP;AACD;;GA9BeV,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}