{"ast":null,"code":"var _jsxFileName = \"/Users/ved/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ✅ Ensure Transaction type is imported\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false); // ✅ Define state for transactions\n\n  const [transactions, setTransactions] = useState(null); // ✅ Ensure transactions are updated correctly\n\n  useEffect(() => {\n    if (transactionsByEmployee !== null) {\n      setTransactions(transactionsByEmployee);\n    } else if (paginatedTransactions !== null && paginatedTransactions.data !== null) {\n      // ✅ Fix: Ensure 'paginatedTransactions' is not null\n      setTransactions(paginatedTransactions.data);\n    } else {\n      setTransactions(null);\n    }\n  }, [paginatedTransactions, transactionsByEmployee]); // ✅ Load all transactions\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]); // ✅ Load transactions by selected employee\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n\n    if (employeeId === EMPTY_EMPLOYEE.id) {\n      transactionsByEmployeeUtils.invalidateData(); // ✅ Fix: Ensure data resets when switching back to \"All Employees\"\n\n      await paginatedTransactionsUtils.fetchAll();\n    } else {\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if ((employees === null || paginatedTransactions === null) && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, paginatedTransactions, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          setTransactions: setTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), transactions !== null && paginatedTransactions !== null && paginatedTransactions.nextPage !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await paginatedTransactionsUtils.fetchAll();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hcBezpX9b0U7XZALg2ajEKbA2zY=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","setTransactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","id","fetchById","loading","item","value","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/ved/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"  // ✅ Ensure Transaction type is imported\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  // ✅ Define state for transactions\n  const [transactions, setTransactions] = useState<Transaction[] | null>(null);\n\n  // ✅ Ensure transactions are updated correctly\n  useEffect(() => {\n    if (transactionsByEmployee !== null) {\n      setTransactions(transactionsByEmployee);\n    } else if (paginatedTransactions !== null && paginatedTransactions.data !== null) {  // ✅ Fix: Ensure 'paginatedTransactions' is not null\n      setTransactions(paginatedTransactions.data);\n    } else {\n      setTransactions(null);\n    }\n  }, [paginatedTransactions, transactionsByEmployee]);\n\n  // ✅ Load all transactions\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  // ✅ Load transactions by selected employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n\n      if (employeeId === EMPTY_EMPLOYEE.id) {  \n        transactionsByEmployeeUtils.invalidateData();  // ✅ Fix: Ensure data resets when switching back to \"All Employees\"\n        await paginatedTransactionsUtils.fetchAll();\n      } else {\n        await transactionsByEmployeeUtils.fetchById(employeeId);\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if ((employees === null || paginatedTransactions === null) && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, paginatedTransactions, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} setTransactions={setTransactions} />  \n\n          {transactions !== null && paginatedTransactions !== null && paginatedTransactions.nextPage !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await paginatedTransactionsUtils.fetchAll();  \n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}